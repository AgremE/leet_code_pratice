from typing import List


class Solution:
    def sampleStats(self, count: List[int]) -> List[float]:
        total_len = sum(count)
        arr = [i for i in range(256)]
        total_sum = sum([x[0] * x[1] for x in zip(count, arr)])
        track_min_max = [0 if x == 0 else 1 for x in count]
        track_min_max = [
            -1 if x[0] == 0 else x[0] * x[1] for x in zip(track_min_max, arr)
        ]
        track_min_max = [x for x in track_min_max if x != -1]
        min_val = min(track_min_max)
        max_val = max(track_min_max)
        avg = float(total_sum / total_len)
        max_value = max(count)
        mode = count.index(max_value)
        is_even = False
        if total_len % 2 == 0:
            middle_ind = total_len // 2
            is_even = True
        else:
            middle_ind = total_len // 2 + 1
        num_middle = 0
        for i in range(len(count)):
            num = count[i]
            middle_ind = middle_ind - num
            if middle_ind == 0:
                if is_even:
                    num_middle = (i + i + 1) / 2
                else:
                    num_middle = i
                break
            elif middle_ind < 0:
                if is_even and num == 1:
                    num_middle = (i + i - 1) / 2
                else:
                    num_middle = i
                break
        return [min_val, max_val, avg, num_middle, mode]


solution = Solution()
print(
    solution.sampleStats(
        [
            0,
            4,
            3,
            2,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]
    )
)
